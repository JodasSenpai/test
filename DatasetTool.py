#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 01, 2021 02:36:04 PM CET  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import DatasetTool_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    DatasetTool_support.set_Tk_var()
    top = Toplevel (root)
    DatasetTool_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    DatasetTool_support.set_Tk_var()
    top = Toplevel (w)
    DatasetTool_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel():
    global w
    w.destroy()
    w = None

class Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("677x551+335+236")
        top.minsize(120, 1)
        top.maxsize(3460, 1061)
        top.resizable(1,  1)
        top.title("DatasetTool")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebookMenu = ttk.Notebook(top)
        self.TNotebookMenu.place(relx=0.0, rely=0.0, relheight=1.013
                , relwidth=1.007)
        self.TNotebookMenu.configure(takefocus="")
        self.TNotebookMenu_t1 = tk.Frame(self.TNotebookMenu)
        self.TNotebookMenu.add(self.TNotebookMenu_t1, padding=3)
        self.TNotebookMenu.tab(0, text="ImageCombiner", compound="left"
                ,underline="-1", )
        self.TNotebookMenu_t1.configure(background="#caffca")
        self.TNotebookMenu_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebookMenu_t1.configure(highlightcolor="black")
        self.TNotebookMenu_t2 = tk.Frame(self.TNotebookMenu)
        self.TNotebookMenu.add(self.TNotebookMenu_t2, padding=3)
        self.TNotebookMenu.tab(1, text="AutoLabel", compound="left"
                ,underline="-1", )
        self.TNotebookMenu_t2.configure(background="#caffca")
        self.TNotebookMenu_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebookMenu_t2.configure(highlightcolor="black")
        self.TNotebookMenu_t3 = tk.Frame(self.TNotebookMenu)
        self.TNotebookMenu.add(self.TNotebookMenu_t3, padding=3)
        self.TNotebookMenu.tab(2, text="LabelImg", compound="left", underline="-1"
                ,)
        self.TNotebookMenu_t3.configure(background="#caffca")
        self.TNotebookMenu_t3.configure(highlightbackground="#d9d9d9")
        self.TNotebookMenu_t3.configure(highlightcolor="black")
        self.TNotebookMenu_t4 = tk.Frame(self.TNotebookMenu)
        self.TNotebookMenu.add(self.TNotebookMenu_t4, padding=3)
        self.TNotebookMenu.tab(3, text="RestructureAndZip", compound="left"
                ,underline="-1", )
        self.TNotebookMenu_t4.configure(background="#caffca")
        self.TNotebookMenu_t4.configure(highlightbackground="#d9d9d9")
        self.TNotebookMenu_t4.configure(highlightcolor="black")

        self.TLabelChosenDir = ttk.Label(self.TNotebookMenu_t1)
        self.TLabelChosenDir.place(relx=0.09, rely=0.364, height=49, width=575)
        self.TLabelChosenDir.configure(background="#b1e2fc")
        self.TLabelChosenDir.configure(foreground="#000000")
        self.TLabelChosenDir.configure(font="TkDefaultFont")
        self.TLabelChosenDir.configure(relief="flat")
        self.TLabelChosenDir.configure(anchor='w')
        self.TLabelChosenDir.configure(justify='left')
        self.TLabelChosenDir.configure(textvariable=DatasetTool_support.chosen_directory)

        self.TButtonChangeDir = ttk.Button(self.TNotebookMenu_t1)
        self.TButtonChangeDir.place(relx=0.659, rely=0.498, height=45, width=196)

        self.TButtonChangeDir.configure(command=DatasetTool_support.change_dir)
        self.TButtonChangeDir.configure(takefocus="")
        self.TButtonChangeDir.configure(text='''Change ImageCombiner Directory''')

        self.TButtonImageCombiner = ttk.Button(self.TNotebookMenu_t1)
        self.TButtonImageCombiner.place(relx=0.09, rely=0.805, height=55
                , width=156)
        self.TButtonImageCombiner.configure(command=DatasetTool_support.image_combiner)
        self.TButtonImageCombiner.configure(takefocus="")
        self.TButtonImageCombiner.configure(text='''Run ImageCombiner''')

        self.MessageHowToImageCombiner = tk.Message(self.TNotebookMenu_t1)
        self.MessageHowToImageCombiner.place(relx=0.09, rely=0.057
                , relheight=0.216, relwidth=0.855)
        self.MessageHowToImageCombiner.configure(background="#caffca")
        self.MessageHowToImageCombiner.configure(foreground="#000000")
        self.MessageHowToImageCombiner.configure(highlightbackground="#d9d9d9")
        self.MessageHowToImageCombiner.configure(highlightcolor="black")
        self.MessageHowToImageCombiner.configure(text='''ImageCombiner creates 48 smaller pictures from the original 6.
If you chose directory with only 6 images inside it will combine only those 6.
If you chose a directory with subdirectories it will iterate through all of them and combine them in each one.
Some images may be taken in reverse order, check the ReverseSort option before running ImageCombiner.''')
        self.MessageHowToImageCombiner.configure(width=571)

        self.CheckReverseSort = tk.Checkbutton(self.TNotebookMenu_t1)
        self.CheckReverseSort.place(relx=0.09, rely=0.69, relheight=0.048
                , relwidth=0.151)
        self.CheckReverseSort.configure(activebackground="#ececec")
        self.CheckReverseSort.configure(activeforeground="#000000")
        self.CheckReverseSort.configure(background="#d9d9d9")
        self.CheckReverseSort.configure(command=DatasetTool_support.set_reverse_sort)
        self.CheckReverseSort.configure(disabledforeground="#a3a3a3")
        self.CheckReverseSort.configure(foreground="#000000")
        self.CheckReverseSort.configure(highlightbackground="#d9d9d9")
        self.CheckReverseSort.configure(highlightcolor="black")
        self.CheckReverseSort.configure(justify='left')
        self.CheckReverseSort.configure(text='''ReverseSort''')
        self.CheckReverseSort.configure(variable=DatasetTool_support.che51)

        self.Message2 = tk.Message(self.TNotebookMenu_t1)
        self.Message2.place(relx=0.359, rely=0.805, relheight=0.102
                , relwidth=0.434)
        self.Message2.configure(anchor='w')
        self.Message2.configure(background="#caffca")
        self.Message2.configure(foreground="#000000")
        self.Message2.configure(highlightbackground="#d9d9d9")
        self.Message2.configure(highlightcolor="black")
        self.Message2.configure(text='''Status:''')
        self.Message2.configure(textvariable=DatasetTool_support.image_combiner_status)
        self.Message2.configure(width=290)

        self.style.map('TRadiobutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.TRadioDrySample = ttk.Radiobutton(self.TNotebookMenu_t2)
        self.TRadioDrySample.place(relx=0.105, rely=0.651, relwidth=0.253
                , relheight=0.0, height=21)
        self.TRadioDrySample.configure(variable=DatasetTool_support.selectedButton)
        self.TRadioDrySample.configure(value="0")
        self.TRadioDrySample.configure(command=DatasetTool_support.set_sample_type)
        self.TRadioDrySample.configure(text='''Dry Sample''')

        self.TRadioOilSample = ttk.Radiobutton(self.TNotebookMenu_t2)
        self.TRadioOilSample.place(relx=0.105, rely=0.69, relwidth=0.253
                , relheight=0.0, height=21)
        self.TRadioOilSample.configure(variable=DatasetTool_support.selectedButton)
        self.TRadioOilSample.configure(command=DatasetTool_support.set_sample_type)
        self.TRadioOilSample.configure(text='''Oil Sample''')

        self.TLabelDirLabel = ttk.Label(self.TNotebookMenu_t2)
        self.TLabelDirLabel.place(relx=0.09, rely=0.268, height=49, width=570)
        self.TLabelDirLabel.configure(background="#b1e2fc")
        self.TLabelDirLabel.configure(foreground="#000000")
        self.TLabelDirLabel.configure(font="TkDefaultFont")
        self.TLabelDirLabel.configure(relief="flat")
        self.TLabelDirLabel.configure(anchor='w')
        self.TLabelDirLabel.configure(justify='left')
        self.TLabelDirLabel.configure(textvariable=DatasetTool_support.chosen_label_dir)

        self.TButtonChangeLabelDir = ttk.Button(self.TNotebookMenu_t2)
        self.TButtonChangeLabelDir.place(relx=0.674, rely=0.421, height=45
                , width=186)
        self.TButtonChangeLabelDir.configure(command=DatasetTool_support.change_label_dir)
        self.TButtonChangeLabelDir.configure(takefocus="")
        self.TButtonChangeLabelDir.configure(text='''Change Label Directory''')

        self.TButtonAutoLabel = ttk.Button(self.TNotebookMenu_t2)
        self.TButtonAutoLabel.place(relx=0.105, rely=0.805, height=55, width=176)

        self.TButtonAutoLabel.configure(command=DatasetTool_support.auto_label)
        self.TButtonAutoLabel.configure(takefocus="")
        self.TButtonAutoLabel.configure(text='''Start AutoLabel''')

        self.Message1 = tk.Message(self.TNotebookMenu_t2)
        self.Message1.place(relx=0.09, rely=0.038, relheight=0.178
                , relwidth=0.853)
        self.Message1.configure(background="#caffca")
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(text='''AutoLabeling tries to automatically label pelods on the image and creates xml file.
If you chose directory with only images inside it will label them.
If you chose a directory with subdirectories it will iterate through all of them and label them in each one.
Write pelod name and chose the type of the collected pelod before starting AutoLabel''')
        self.Message1.configure(width=570)

        self.TEntryPelodName = ttk.Entry(self.TNotebookMenu_t2)
        self.TEntryPelodName.place(relx=0.105, rely=0.594, relheight=0.04
                , relwidth=0.189)
        self.TEntryPelodName.configure(textvariable=DatasetTool_support.pelod_name)
        self.TEntryPelodName.configure(takefocus="")
        self.TEntryPelodName.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.TEntryPelodName_tooltip = \
        ToolTip(self.TEntryPelodName, self.tooltip_font, '''Enter pelod name:''')

        self.TLabelPelodEntry = ttk.Label(self.TNotebookMenu_t2)
        self.TLabelPelodEntry.place(relx=0.105, rely=0.556, height=19, width=105)

        self.TLabelPelodEntry.configure(background="#caffca")
        self.TLabelPelodEntry.configure(foreground="#000000")
        self.TLabelPelodEntry.configure(font="TkDefaultFont")
        self.TLabelPelodEntry.configure(relief="flat")
        self.TLabelPelodEntry.configure(anchor='w')
        self.TLabelPelodEntry.configure(justify='left')
        self.TLabelPelodEntry.configure(text='''Write pelod name:''')

        self.Message3 = tk.Message(self.TNotebookMenu_t2)
        self.Message3.place(relx=0.419, rely=0.805, relheight=0.102
                , relwidth=0.494)
        self.Message3.configure(anchor='w')
        self.Message3.configure(background="#caffca")
        self.Message3.configure(foreground="#000000")
        self.Message3.configure(highlightbackground="#d9d9d9")
        self.Message3.configure(highlightcolor="black")
        self.Message3.configure(textvariable=DatasetTool_support.auto_label_status)
        self.Message3.configure(width=330)

        self.TLabelLabelImgDir = ttk.Label(self.TNotebookMenu_t3)
        self.TLabelLabelImgDir.place(relx=0.06, rely=0.211, height=59, width=575)

        self.TLabelLabelImgDir.configure(background="#b1e2fc")
        self.TLabelLabelImgDir.configure(foreground="#000000")
        self.TLabelLabelImgDir.configure(font="TkDefaultFont")
        self.TLabelLabelImgDir.configure(relief="flat")
        self.TLabelLabelImgDir.configure(anchor='w')
        self.TLabelLabelImgDir.configure(justify='left')
        self.TLabelLabelImgDir.configure(textvariable=DatasetTool_support.chosen_label_img_dir)

        self.TButtonChangeLabelImgDir = ttk.Button(self.TNotebookMenu_t3)
        self.TButtonChangeLabelImgDir.place(relx=0.674, rely=0.364, height=45
                , width=166)
        self.TButtonChangeLabelImgDir.configure(command=DatasetTool_support.change_label_img_dir)
        self.TButtonChangeLabelImgDir.configure(takefocus="")
        self.TButtonChangeLabelImgDir.configure(text='''Change LabelImg Directory''')

        self.TButtonLabelImg = ttk.Button(self.TNotebookMenu_t3)
        self.TButtonLabelImg.place(relx=0.075, rely=0.651, height=65, width=156)
        self.TButtonLabelImg.configure(command=DatasetTool_support.run_label_img)
        self.TButtonLabelImg.configure(takefocus="")
        self.TButtonLabelImg.configure(text='''Run LabelImg''')

        self.Message5 = tk.Message(self.TNotebookMenu_t3)
        self.Message5.place(relx=-0.135, rely=-0.441, relheight=0.102
                , relwidth=0.861)
        self.Message5.configure(background="#caffca")
        self.Message5.configure(foreground="#000000")
        self.Message5.configure(highlightbackground="#d9d9d9")
        self.Message5.configure(highlightcolor="black")
        self.Message5.configure(text='''Opening LabelImg does not work.''')
        self.Message5.configure(width=580)

        self.Message4 = tk.Message(self.TNotebookMenu_t3)
        self.Message4.place(relx=0.06, rely=0.038, relheight=0.14
                , relwidth=0.861)
        self.Message4.configure(background="#caffca")
        self.Message4.configure(foreground="#000000")
        self.Message4.configure(highlightbackground="#d9d9d9")
        self.Message4.configure(highlightcolor="black")
        self.Message4.configure(text='''Opening LabelImg does not work at the momment.
To open LabelImg, open command prompt, set directory with cd command and run command: python LabelImg.py''')
        self.Message4.configure(width=580)

        self.TLabelStructDir = ttk.Label(self.TNotebookMenu_t4)
        self.TLabelStructDir.place(relx=0.075, rely=0.307, height=59, width=575)
        self.TLabelStructDir.configure(background="#b1e2fc")
        self.TLabelStructDir.configure(foreground="#000000")
        self.TLabelStructDir.configure(font="TkDefaultFont")
        self.TLabelStructDir.configure(relief="flat")
        self.TLabelStructDir.configure(anchor='w')
        self.TLabelStructDir.configure(justify='left')
        self.TLabelStructDir.configure(textvariable=DatasetTool_support.chosen_struct_dir)

        self.TButtonChangeStructDir = ttk.Button(self.TNotebookMenu_t4)
        self.TButtonChangeStructDir.place(relx=0.689, rely=0.441, height=45
                , width=166)
        self.TButtonChangeStructDir.configure(command=DatasetTool_support.change_struct_dir)
        self.TButtonChangeStructDir.configure(takefocus="")
        self.TButtonChangeStructDir.configure(text='''Change  Directory''')

        self.TButton1 = ttk.Button(self.TNotebookMenu_t4)
        self.TButton1.place(relx=0.075, rely=0.728, height=55, width=166)
        self.TButton1.configure(command=DatasetTool_support.run_restructure_zip)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Run Restructure And Zip''')

        self.Message6 = tk.Message(self.TNotebookMenu_t4)
        self.Message6.place(relx=0.075, rely=0.077, relheight=0.14
                , relwidth=0.861)
        self.Message6.configure(background="#caffca")
        self.Message6.configure(foreground="#000000")
        self.Message6.configure(highlightbackground="#d9d9d9")
        self.Message6.configure(highlightcolor="black")
        self.Message6.configure(text='''Restructure and Zip, takes images(jpg) and labels(xml) and puts them in a seperated foleders and then zip it.
Chose a directory with subdirectories, it will iterate through all of them and combine them in seperated folders.''')
        self.Message6.configure(width=580)

        self.Message7 = tk.Message(self.TNotebookMenu_t4)
        self.Message7.place(relx=0.389, rely=0.728, relheight=0.121
                , relwidth=0.494)
        self.Message7.configure(anchor='w')
        self.Message7.configure(background="#caffca")
        self.Message7.configure(cursor="fleur")
        self.Message7.configure(foreground="#000000")
        self.Message7.configure(highlightbackground="#d9d9d9")
        self.Message7.configure(highlightcolor="black")
        self.Message7.configure(textvariable=DatasetTool_support.resturct_status)
        self.Message7.configure(width=330)

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





