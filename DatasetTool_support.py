#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Jan 27, 2021 11:19:57 AM CET  platform: Windows NT
#    Jan 27, 2021 02:08:51 PM CET  platform: Windows NT
#    Jan 27, 2021 02:35:52 PM CET  platform: Windows NT
#    Jan 27, 2021 04:25:27 PM CET  platform: Windows NT
#    Jan 27, 2021 04:41:59 PM CET  platform: Windows NT
#    Jan 28, 2021 09:11:06 AM CET  platform: Windows NT
#    Jan 28, 2021 02:28:06 PM CET  platform: Windows NT
#    Jan 28, 2021 03:18:00 PM CET  platform: Windows NT
#    Jan 28, 2021 03:19:27 PM CET  platform: Windows NT
#    Jan 31, 2021 01:53:41 PM CET  platform: Windows NT
#    Jan 31, 2021 02:11:24 PM CET  platform: Windows NT
#    Feb 01, 2021 02:35:57 PM CET  platform: Windows NT

import sys
import time
from ImageCombiner import ImageCombiner
from AutoLabel import AutoLabel
from LabelImg import LabelImg
from RestructAndZip import RestructAndZip

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

try:
    from Tkinter import filedialog
except ImportError:
    from tkinter import filedialog

def init(top, gui, *args, **kwargs):
    global w, top_level, root, imageCombiner, autoLabel, labelImg, restructZip
    w = gui
    top_level = top
    root = top
    imageCombiner = ImageCombiner()
    autoLabel = AutoLabel()
    labelImg = LabelImg()
    restructZip = RestructAndZip()

def set_Tk_var():
    global resturct_status
    resturct_status = tk.StringVar()
    resturct_status.set('Status: ')

    global chosen_struct_dir
    chosen_struct_dir = tk.StringVar()
    chosen_struct_dir.set('Chosen Directory: None')

    global auto_label_status
    auto_label_status = tk.StringVar()
    auto_label_status.set('Status: ')

    global image_combiner_status
    image_combiner_status = tk.StringVar()
    image_combiner_status.set('Status:')

    global pelod_name
    pelod_name = tk.StringVar()
    global selectedButton
    selectedButton = tk.StringVar()
    global chosen_label_dir
    chosen_label_dir = tk.StringVar()
    chosen_label_dir.set('Chosen Directory: None')

    global chosen_directory
    chosen_directory = tk.StringVar()
    chosen_directory.set('Chosen Directory: None')

    global chosen_label_img_dir
    chosen_label_img_dir = tk.StringVar()
    chosen_label_img_dir.set('Chosen Directory: None')

    global che51
    che51 = tk.IntVar()

def change_dir():
    global imageCombiner
    global chosen_directory
    init_dir = imageCombiner.get_dir_path()
    dir = filedialog.askdirectory(title="Select a directory", initialdir=init_dir if init_dir != "None" else "/")
    imageCombiner.set_dir_path(dir)
    chosen_directory.set('Chosen Directory: ' + imageCombiner.get_dir_path())
    sys.stdout.flush()

def image_combiner():
    print('DatasetTool_support.image_combiner')
    global imageCombiner, image_combiner_status
    status = imageCombiner.run_image_combiner()
    image_combiner_status.set('Status: ' + status)
    sys.stdout.flush()

def set_reverse_sort():
    print('DatasetTool_support.set_reverse_sort')
    global imageCombiner
    imageCombiner.change_sort()
    sys.stdout.flush()

def auto_label():
    print('DatasetTool_support.auto_label')
    global autoLabel, pelod_name, auto_label_status

    status = autoLabel.run_auto_label(pelod_name.get())
    auto_label_status.set('Status: ' + status)
    sys.stdout.flush()

def change_label_dir():
    global autoLabel, chosen_label_dir

    init_dir = autoLabel.get_dir_path()
    dir = filedialog.askdirectory(title="Select a directory", initialdir=init_dir if init_dir != "None" else "/")
    autoLabel.set_dir_path(dir)

    chosen_label_dir.set('Chosen Directory: ' + autoLabel.get_dir_path())
    sys.stdout.flush()

def set_sample_type():
    global autoLabel
    # 0 - DRY SAMPLE
    # 1 - OIL SAMPLE
    global selectedButton

    if selectedButton.get() == '0':
        autoLabel.set_sample(0)
    elif selectedButton.get() == '1':
        autoLabel.set_sample(1)
    sys.stdout.flush()

def change_label_img_dir():
    global chosen_label_img_dir, labelImg
    file = filedialog.askopenfilename(initialdir="/", title="Select a file",
                                      filetype=(("*", "*.*"), ("All Files", "*.")))
    labelImg.set_dir_path(file)
    chosen_label_img_dir.set('Chosen Directory: ' + labelImg.get_dir_path())
    sys.stdout.flush()

def run_label_img():
    global labelImg
    status = labelImg.run_label_img()
    print(status)
    sys.stdout.flush()

def change_struct_dir():
    global restructZip, chosen_struct_dir
    init_dir = restructZip.get_dir_path()
    dir = filedialog.askdirectory(title="Select a directory", initialdir=init_dir if init_dir != "None" else "/")
    restructZip.set_dir_path(dir)
    chosen_struct_dir.set('Chosen Directory: ' + restructZip.get_dir_path())
    sys.stdout.flush()

def run_restructure_zip():
    global restructZip, resturct_status
    status = restructZip.run_restructure_and_zip()
    resturct_status.set('Status: '+status)
    sys.stdout.flush()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import DatasetTool

    DatasetTool.vp_start_gui()





